AWSTemplateFormatVersion: "2010-09-09"

Description: Landing VPC and Network settings

Parameters:
  # ProjectDescription:
  #   Description: ProServe Workshop written by Kohhji Hashimoto
  #   Type: String
  #   Default: AWS AI/ML Workshop
  SageMakerInstanceType:
    Description: 'The type of SageMaker notebook to be provisioned. '
    Type: String
    Default: ml.t3.medium
    AllowedValues:
      - ml.t2.medium
      - ml.t3.medium
      - ml.t3.large
      - ml.t3.xlarge
      - ml.t3.2xlarge
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
  SageMakerS3Bucket:
    Description: <Optional> Name of a pre-existing bucket that SageMaker will be granted full access
    Type: String
    Default: ''

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.1.0.0/16"
    Public1:
      CIDR: "10.1.1.0/24"
    Private1:
      CIDR: "10.1.3.0/24"

  AZRegions:
    ap-northeast-1:
      AZs: ["a", "c"]

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingVPC

  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Public1"
          - "CIDR"
      MapPublicIpOnLaunch: "true"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingPublic


  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingPrivate


  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LanidngGW

  GatewayToInternet:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId:
        Ref: "VPC"
      InternetGatewayId:
        Ref: "InternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingPublic

  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "GatewayToInternet"
    Properties:
      RouteTableId:
        Ref: "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId:
        Ref: "InternetGateway"

  PublicSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      RouteTableId:
        Ref: "PublicRouteTable"


  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingPublic
  PrivateNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingPrivate

  InboundHTTPPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  OutboundPublicNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PublicSubnet1"
      NetworkAclId:
        Ref: "PublicNetworkAcl"

  InboundHTTPPrivateNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
        
  OutboundPrivateNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PrivateSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      NetworkAclId:
        Ref: "PrivateNetworkAcl"

  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"

  NATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties:
      AllocationId:
        Fn::GetAtt:
          - "ElasticIP1"
          - "AllocationId"
      SubnetId:
        Ref: "PublicSubnet1"
      Tags:
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingNAT

  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-LandingPrivate

  PrivateRouteToInternet:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway1"

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      RouteTableId:
        Ref: "PrivateRouteTable"


  AISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId:
        Ref: "VPC"
      GroupDescription: SageMaker Security Group
      Tags: 
        - Key: Name
          Value:
           !Sub ${AWS::StackName}-LandingSG

  AISecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId:
        Ref: AISecurityGroup

  SSHSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Ref: AISecurityGroup

  HttpsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId:
        Ref: AISecurityGroup

  PublicSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
  SageMakerNotebookEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - aws.sagemaker.
          - !Ref 'AWS::Region'
          - .notebook
  ECRApiEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ecr.api

  NotebookExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-AmazonSageMaker-ExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-codecommit-crossacount
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - sts:AssumeRole
              Resource: arn:aws:iam::593338710522:role/khlab-codecommit-crossaccount
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
      Path: "/service-role/"

  NotebookInstance:
    Type: 'AWS::SageMaker::NotebookInstance'
    Properties:
      InstanceType: !Ref SageMakerInstanceType
      NotebookInstanceName: !Sub ${AWS::StackName}-LandingNotebook
      RoleArn: !GetAtt NotebookExecutionRole.Arn
      DirectInternetAccess: Disabled
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref AISecurityGroup
      RootAccess: Enabled
      LifecycleConfigName: !GetAtt BasicNotebookInstanceLifecycleConfig.NotebookInstanceLifecycleConfigName
  BasicNotebookInstanceLifecycleConfig:
    Type: "AWS::SageMaker::NotebookInstanceLifecycleConfig"
    Properties:
      NotebookInstanceLifecycleConfigName: !Sub ${AWS::StackName}-GitConfig
      OnCreate:
        - Content:
            Fn::Base64:
              Fn::Join:
                - ''
                - - |
                    #!/bin/bash
                    export HOME=/home/ec2-user
                    set -e
                    echo -e \
                    "[profile CrossAccountAccessProfile]\n\
                    region=ap-northeast-1\n\
                    role_arn=arn:aws:iam::593338710522:role/khlab-codecommit-crossaccount\n\
                    credential_source=Ec2InstanceMetadata\n" >> /home/ec2-user/.aws/config
                    cd /home/ec2-user/SageMaker/
                    git config --global credential.helper '!aws --profile CrossAccountAccessProfile codecommit credential-helper $@'
                    git config --global credential.UseHttpPath true
                    git clone https://git-codecommit.ap-northeast-1.amazonaws.com/v1/repos/khlab-handson
                    chown -R ec2-user.ec2-user /home/ec2-user/.aws 
                    chown -R ec2-user.ec2-user /home/ec2-user/.gitconfig

Outputs:
  VPCId:
    Description: "VPCId of VPC"
    Value:
      Ref: "VPC"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-LandingVPC"

  PublicSubnet1:
    Description: "SubnetId of Landing public subnet"
    Value:
      Ref: "PublicSubnet1"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-LandingPublicSubnet"

  PrivateSubnet1:
    Description: "SubnetId of Landing private subnet"
    Value:
      Ref: "PrivateSubnet1"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-LandingSubnet"

  SecurityGroupId:
    Description: ID of the Landing security group.
    Value:
      Ref: "AISecurityGroup"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-LandingSG"
