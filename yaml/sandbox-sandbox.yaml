AWSTemplateFormatVersion: "2010-09-09"

Description: Stack to create VPC and Network settings

Parameters:
  SageMakerInstanceType:
    Description: 'The type of SageMaker notebook to be provisioned. '
    Type: String
    Default: ml.t3.xlarge
    AllowedValues:
      - ml.t2.medium
      - ml.t3.medium
      - ml.t3.large
      - ml.t3.xlarge
      - ml.t3.2xlarge
      - ml.m5.xlarge
      - ml.m5.2xlarge
      - ml.m5.4xlarge
  SageMakerS3Bucket:
    Description: <Optional> Name of a pre-existing bucket that SageMaker will be granted full access
    Type: String
    Default: ''

Mappings:
  SubnetConfig:
    VPC:
      CIDR: "10.0.0.0/16"
    Public1:
      CIDR: "10.0.1.0/24"
    Public2:
      CIDR: "10.0.3.0/24"
    Private1:
      CIDR: "10.0.2.0/24"
    Private2:
      CIDR: "10.0.4.0/24"

  AZRegions:
    ap-northeast-1:
      AZs: ["a", "c"]

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "VPC"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Public"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-SandboxVPC

  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private1"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-Sandbox1

  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId:
        Ref: "VPC"
      AvailabilityZone:
        Fn::Sub:
          - "${AWS::Region}${AZ}"
          - AZ: !Select [1, !FindInMap ["AZRegions", !Ref "AWS::Region", "AZs"]]
      CidrBlock:
        Fn::FindInMap:
          - "SubnetConfig"
          - "Private2"
          - "CIDR"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-Sandbox2




  PrivateNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Application"
          Value:
            Ref: "AWS::StackName"
        - Key: "Network"
          Value: "Private"
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-Sandbox

  InboundHTTPPrivateNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"
        
  OutboundPrivateNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId:
        Ref: "PrivateNetworkAcl"
      RuleNumber: "100"
      Protocol: "-1"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "0"
        To: "65535"

  PrivateSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      NetworkAclId:
        Ref: "PrivateNetworkAcl"

  PrivateSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet2"
      NetworkAclId:
        Ref: "PrivateNetworkAcl"


  PrivateRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId:
        Ref: "VPC"
      Tags:
        - Key: "Name"
          Value:
            !Sub ${AWS::StackName}-Sandbox

  PrivateSubnetRouteTableAssociation1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      RouteTableId:
        Ref: "PrivateRouteTable"

  PrivateSubnetRouteTableAssociation2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet2"
      RouteTableId:
        Ref: "PrivateRouteTable"

  AISecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      VpcId:
        Ref: "VPC"
      GroupDescription: SageMaker Security Group
      Tags: 
        - Key: Name
          Value:
           !Sub ${AWS::StackName}-SandboxSG

  AISecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId:
        Ref: AISecurityGroup

  SSHSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId:
        Ref: AISecurityGroup

  HttpsSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      SourceSecurityGroupId:
        Ref: AISecurityGroup

  PublicSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties: 
      GroupId:
        Ref: AISecurityGroup
      IpProtocol: -1
      CidrIp: 0.0.0.0/0

  S3Endpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      RouteTableIds:
        - !Ref PrivateRouteTable
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .s3
  SageMakerApiEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .sagemaker.api
  SageMakerRuntimeEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .sagemaker.runtime
  SageMakerNotebookEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - aws.sagemaker.
          - !Ref 'AWS::Region'
          - .notebook
  ECRApiEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ecr.api
  LogEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .logs
  STSEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .sts
  CodeCommitEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .codecommit
  GitCodeCommitEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .git-codecommit
  SSMEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ssm
  SSMmessageEndpoint:
    Type: "AWS::EC2::VPCEndpoint"
    Properties:
      VpcId:
        Ref: "VPC"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      VpcEndpointType:
        "Interface"
      SecurityGroupIds:
        - !Ref AISecurityGroup
      ServiceName: !Join 
        - ''
        - - com.amazonaws.
          - !Ref 'AWS::Region'
          - .ssmmessages

  NotebookInstance:
    Type: 'AWS::SageMaker::NotebookInstance'
    Properties:
      InstanceType: !Ref SageMakerInstanceType
      NotebookInstanceName: !Sub ${AWS::StackName}-SandboxNotebook
      RoleArn: !GetAtt NotebookExecutionRole.Arn
      DirectInternetAccess: Disabled
      SubnetId: !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref AISecurityGroup
      RootAccess: Enabled

  NotebookExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-AmazonSageMaker-ExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSageMakerFullAccess"
        - "arn:aws:iam::aws:policy/AmazonElasticMapReduceReadOnlyAccess"
      Path: "/service-role/"


Outputs:
  Subnet1:
    Description: "Sandbox subnet1"
    Value:
      Ref: "PrivateSubnet1"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-SandboxSubnet1"

  Subnet2:
    Description: "Sandbox subnet2"
    Value:
      Ref: "PrivateSubnet2"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-SandboxSubnet2"

  SecurityGroupId:
    Description: Sandbox security group.
    Value:
      Ref: "AISecurityGroup"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-SecurityGroup"

  SageMakerApi:
    Description: sagemake.api
    Value:
      Ref: "SageMakerApiEndpoint"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-sagemakeapi"
  SageMakerRuntime:
    Description: sagemaker.runtime
    Value:
      Ref: "SageMakerRuntimeEndpoint"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-sagemakerruntime"
  Notebook:
    Description: notebook
    Value:
      Ref: "SageMakerNotebookEndpoint"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-notebook"
  ECRApi:
    Description: ecr.api
    Value:
      Ref: "ECRApiEndpoint"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-ecrapi"
  Log:
    Description: log
    Value:
      Ref: "LogEndpoint"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-log"
  STS:
    Description: sts
    Value:
      Ref: "STSEndpoint"
    Export:
      Name: !Sub "${AWS::Region}-${AWS::StackName}-sts"
